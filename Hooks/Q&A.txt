Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 복잡한 코드를 편리하게 짜기 위해 힘들지만 쓰나보다
    - 관리하기 편한 컴포넌트 구조라서
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 유지보수


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 변화가 필요한 화면만 리랜더링하기 위해서 원본유지 느낌
    -

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리랜더링


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 딱 변화한 부분만 집어서 업데이트할 수 있다


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - state가 바뀔 때

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState : 상태관리가 필요할 때
    (2) useRef : 돔 조작, 변하지 않는 값 저장
    (3) useEffect : 마운트될 때 실행 언마운트때 실행, 의존성 배열에 의해서도 재실행 가능
    (4) useCallback : 새로 함수 선언 없이 사용하는 것, 초기 값 기억하니 그 값도 업데이트 해줘라
    (5) useMemo : 화면이 바뀌어도 연산과정 없이 값 재사용 가능

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 반복되는 코드 제거
    - 계속 반복되는 작업이 많을 때


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 컴포넌트로 어떻게 쪼갤 것인가
    - 리랜더링시 어디까지 같이 되어야하나
    - 폴더 상하위 구조(상위에서 하위로만 props전달이 가능하니)


Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - dom api에 접근하기 위해 고민하는 시간을 줄일 수 있을 것 같다
    - 데이터의 흐름 알기 쉬우려나.. 더 어려울 것 같은데..(이건 익숙하지 않아서 그런듯)
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 랜더링(왜냐 state가 바뀐 컴포넌트가 다같이 리랜더링 되니까)
     - 다 맞는 말이라서?
